{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _words = require(\"../constants/words\");\n\nvar _util = require(\"../util\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Generator =\n/*#__PURE__*/\nfunction () {\n  function Generator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$sentencesPerPara = _ref.sentencesPerParagraph,\n        sentencesPerParagraph = _ref$sentencesPerPara === void 0 ? {\n      max: 7,\n      min: 3\n    } : _ref$sentencesPerPara,\n        _ref$wordsPerSentence = _ref.wordsPerSentence,\n        wordsPerSentence = _ref$wordsPerSentence === void 0 ? {\n      max: 15,\n      min: 5\n    } : _ref$wordsPerSentence,\n        random = _ref.random,\n        seed = _ref.seed,\n        _ref$words = _ref.words,\n        words = _ref$words === void 0 ? _words.WORDS : _ref$words;\n\n    _classCallCheck(this, Generator);\n\n    _defineProperty(this, \"sentencesPerParagraph\", void 0);\n\n    _defineProperty(this, \"wordsPerSentence\", void 0);\n\n    _defineProperty(this, \"random\", void 0);\n\n    _defineProperty(this, \"words\", void 0);\n\n    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {\n      throw new Error(\"Minimum number of sentences per paragraph (\".concat(sentencesPerParagraph.min, \") cannot exceed maximum (\").concat(sentencesPerParagraph.max, \").\"));\n    }\n\n    if (wordsPerSentence.min > wordsPerSentence.max) {\n      throw new Error(\"Minimum number of words per sentence (\".concat(wordsPerSentence.min, \") cannot exceed maximum (\").concat(wordsPerSentence.max, \").\"));\n    }\n\n    this.sentencesPerParagraph = sentencesPerParagraph;\n    this.words = words;\n    this.wordsPerSentence = wordsPerSentence;\n    this.random = random || Math.random;\n  }\n\n  _createClass(Generator, [{\n    key: \"generateRandomInteger\",\n    value: function generateRandomInteger(min, max) {\n      return Math.floor(this.random() * (max - min + 1) + min);\n    }\n  }, {\n    key: \"generateRandomWords\",\n    value: function generateRandomWords(num) {\n      var _this = this;\n\n      var _this$wordsPerSentenc = this.wordsPerSentence,\n          min = _this$wordsPerSentenc.min,\n          max = _this$wordsPerSentenc.max;\n      var length = num || this.generateRandomInteger(min, max);\n      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {\n        return \"\".concat(_this.pluckRandomWord(), \" \").concat(accumulator);\n      }, \"\").trim();\n    }\n  }, {\n    key: \"generateRandomSentence\",\n    value: function generateRandomSentence(num) {\n      return \"\".concat((0, _util.capitalize)(this.generateRandomWords(num)), \".\");\n    }\n  }, {\n    key: \"generateRandomParagraph\",\n    value: function generateRandomParagraph(num) {\n      var _this2 = this;\n\n      var _this$sentencesPerPar = this.sentencesPerParagraph,\n          min = _this$sentencesPerPar.min,\n          max = _this$sentencesPerPar.max;\n      var length = num || this.generateRandomInteger(min, max);\n      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {\n        return \"\".concat(_this2.generateRandomSentence(), \" \").concat(accumulator);\n      }, \"\").trim();\n    }\n  }, {\n    key: \"pluckRandomWord\",\n    value: function pluckRandomWord() {\n      var min = 0;\n      var max = this.words.length - 1;\n      var index = this.generateRandomInteger(min, max);\n      return this.words[index];\n    }\n  }]);\n\n  return Generator;\n}();\n\nvar _default = Generator;\nexports.default = _default;","map":{"version":3,"sources":["../../src/lib/generator.ts"],"names":["Generator","sentencesPerParagraph","max","min","wordsPerSentence","random","seed","words","WORDS","Math","num","length","index"],"mappings":"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","sourcesContent":["import { WORDS } from \"../constants/words\";\r\nimport { capitalize, makeArrayOfLength } from \"../util\";\r\n\r\nexport interface IBounds {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport type IPrng = () => number;\r\n\r\nexport type ISeedRandom = new (seed?: string) => IPrng;\r\n\r\nexport interface IMath {\r\n  seedrandom: ISeedRandom;\r\n}\r\n\r\nexport interface IGeneratorOptions {\r\n  sentencesPerParagraph?: IBounds;\r\n  wordsPerSentence?: IBounds;\r\n  random?: IPrng;\r\n  seed?: string;\r\n  words?: string[];\r\n}\r\n\r\nclass Generator {\r\n  public sentencesPerParagraph: IBounds;\r\n  public wordsPerSentence: IBounds;\r\n  public random: IPrng;\r\n  public words: string[];\r\n\r\n  constructor({\r\n    sentencesPerParagraph = { max: 7, min: 3 },\r\n    wordsPerSentence = { max: 15, min: 5 },\r\n    random,\r\n    seed,\r\n    words = WORDS,\r\n  }: IGeneratorOptions = {}) {\r\n    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {\r\n      throw new Error(\r\n        `Minimum number of sentences per paragraph (${\r\n          sentencesPerParagraph.min\r\n        }) cannot exceed maximum (${sentencesPerParagraph.max}).`,\r\n      );\r\n    }\r\n\r\n    if (wordsPerSentence.min > wordsPerSentence.max) {\r\n      throw new Error(\r\n        `Minimum number of words per sentence (${\r\n          wordsPerSentence.min\r\n        }) cannot exceed maximum (${wordsPerSentence.max}).`,\r\n      );\r\n    }\r\n\r\n    this.sentencesPerParagraph = sentencesPerParagraph;\r\n    this.words = words;\r\n    this.wordsPerSentence = wordsPerSentence;\r\n    this.random = random || Math.random;\r\n  }\r\n\r\n  public generateRandomInteger(min: number, max: number): number {\r\n    return Math.floor(this.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  public generateRandomWords(num?: number): string {\r\n    const { min, max } = this.wordsPerSentence;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.pluckRandomWord()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public generateRandomSentence(num?: number): string {\r\n    return `${capitalize(this.generateRandomWords(num))}.`;\r\n  }\r\n\r\n  public generateRandomParagraph(num?: number): string {\r\n    const { min, max } = this.sentencesPerParagraph;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.generateRandomSentence()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public pluckRandomWord(): string {\r\n    const min = 0;\r\n    const max = this.words.length - 1;\r\n    const index = this.generateRandomInteger(min, max);\r\n    return this.words[index];\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n"]},"metadata":{},"sourceType":"script"}