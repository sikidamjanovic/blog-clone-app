{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _formats = require(\"../constants/formats\");\n\nvar _lineEndings = require(\"../constants/lineEndings\");\n\nvar _generator = _interopRequireDefault(require(\"../lib/generator\"));\n\nvar _util = require(\"../util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar LoremIpsum =\n/*#__PURE__*/\nfunction () {\n  function LoremIpsum() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _formats.FORMAT_PLAIN;\n    var suffix = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, LoremIpsum);\n\n    _defineProperty(this, \"generator\", void 0);\n\n    _defineProperty(this, \"format\", void 0);\n\n    _defineProperty(this, \"suffix\", void 0);\n\n    if (_formats.FORMATS.indexOf(format.toLowerCase()) === -1) {\n      throw new Error(\"\".concat(format, \" is an invalid format. Please use \").concat(_formats.FORMATS.join(\" or \"), \".\"));\n    }\n\n    this.format = format.toLowerCase();\n    this.suffix = suffix;\n    this.generator = new _generator.default(options);\n  }\n\n  _createClass(LoremIpsum, [{\n    key: \"getLineEnding\",\n    value: function getLineEnding() {\n      if (this.suffix) {\n        return this.suffix;\n      }\n\n      if (!(0, _util.isReactNative)() && (0, _util.isNode)() && (0, _util.isWindows)()) {\n        return _lineEndings.LINE_ENDINGS.WIN32;\n      }\n\n      return _lineEndings.LINE_ENDINGS.POSIX;\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(str) {\n      if (this.format === _formats.FORMAT_HTML) {\n        return \"<p>\".concat(str, \"</p>\");\n      }\n\n      return str;\n    }\n  }, {\n    key: \"formatStrings\",\n    value: function formatStrings(strings) {\n      var _this = this;\n\n      return strings.map(function (str) {\n        return _this.formatString(str);\n      });\n    }\n  }, {\n    key: \"generateWords\",\n    value: function generateWords(num) {\n      return this.formatString(this.generator.generateRandomWords(num));\n    }\n  }, {\n    key: \"generateSentences\",\n    value: function generateSentences(num) {\n      return this.formatString(this.generator.generateRandomParagraph(num));\n    }\n  }, {\n    key: \"generateParagraphs\",\n    value: function generateParagraphs(num) {\n      var makeString = this.generator.generateRandomParagraph.bind(this.generator);\n      return this.formatStrings((0, _util.makeArrayOfStrings)(num, makeString)).join(this.getLineEnding());\n    }\n  }]);\n\n  return LoremIpsum;\n}();\n\nvar _default = LoremIpsum;\nexports.default = _default;","map":{"version":3,"sources":["../../src/lib/LoremIpsum.ts"],"names":["LoremIpsum","options","format","FORMAT_PLAIN","suffix","FORMATS","Generator","LINE_ENDINGS","str","FORMAT_HTML","strings","num","makeString"],"mappings":"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","sourcesContent":["import { FORMAT_HTML, FORMAT_PLAIN, FORMATS } from \"../constants/formats\";\r\nimport { LINE_ENDINGS } from \"../constants/lineEndings\";\r\nimport Generator, { IGeneratorOptions } from \"../lib/generator\";\r\nimport { isNode, isReactNative, isWindows, makeArrayOfStrings } from \"../util\";\r\n\r\nclass LoremIpsum {\r\n  public generator: Generator;\r\n  public format: string;\r\n  public suffix?: string;\r\n\r\n  constructor(\r\n    options: IGeneratorOptions = {},\r\n    format: string = FORMAT_PLAIN,\r\n    suffix?: string,\r\n  ) {\r\n    if (FORMATS.indexOf(format.toLowerCase()) === -1) {\r\n      throw new Error(\r\n        `${format} is an invalid format. Please use ${FORMATS.join(\" or \")}.`,\r\n      );\r\n    }\r\n\r\n    this.format = format.toLowerCase();\r\n    this.suffix = suffix;\r\n    this.generator = new Generator(options);\r\n  }\r\n\r\n  public getLineEnding() {\r\n    if (this.suffix) {\r\n      return this.suffix;\r\n    }\r\n\r\n    if (!isReactNative() && isNode() && isWindows()) {\r\n      return LINE_ENDINGS.WIN32;\r\n    }\r\n\r\n    return LINE_ENDINGS.POSIX;\r\n  }\r\n\r\n  public formatString(str: string): string {\r\n    if (this.format === FORMAT_HTML) {\r\n      return `<p>${str}</p>`;\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public formatStrings(strings: string[]): string[] {\r\n    return strings.map((str) => this.formatString(str));\r\n  }\r\n\r\n  public generateWords(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomWords(num));\r\n  }\r\n\r\n  public generateSentences(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomParagraph(num));\r\n  }\r\n\r\n  public generateParagraphs(num: number): string {\r\n    const makeString = this.generator.generateRandomParagraph.bind(\r\n      this.generator,\r\n    );\r\n    return this.formatStrings(makeArrayOfStrings(num, makeString)).join(\r\n      this.getLineEnding(),\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoremIpsum;\r\n"]},"metadata":{},"sourceType":"script"}