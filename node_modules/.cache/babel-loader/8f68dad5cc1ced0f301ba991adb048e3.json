{"ast":null,"code":"function generator() {\n  var options = arguments.length ? arguments[0] : {},\n      count = options.count || 1,\n      units = options.units || 'sentences',\n      sentenceLowerBound = options.sentenceLowerBound || 5,\n      sentenceUpperBound = options.sentenceUpperBound || 15,\n      paragraphLowerBound = options.paragraphLowerBound || 3,\n      paragraphUpperBound = options.paragraphUpperBound || 7,\n      format = options.format || 'plain',\n      words = options.words || require('./dictionary').words,\n      random = options.random || Math.random,\n      suffix = options.suffix;\n\n  if (!suffix) {\n    var isNode = typeof module !== 'undefined' && module.exports;\n    var isReactNative = typeof product !== 'undefined' && product.navigator === 'ReactNative';\n    var isWindows = typeof process !== 'undefined' && 'win32' === process.platform;\n\n    if (!isReactNative && isNode && isWindows) {\n      suffix = '\\r\\n';\n    } else {\n      suffix = '\\n';\n    }\n  }\n\n  units = simplePluralize(units.toLowerCase());\n\n  function randomInteger(min, max) {\n    return Math.floor(random() * (max - min + 1) + min);\n  }\n\n  ;\n\n  function randomWord(words) {\n    return words[randomInteger(0, words.length - 1)];\n  }\n\n  ;\n\n  function randomSentence(words, lowerBound, upperBound) {\n    var sentence = '',\n        bounds = {\n      min: 0,\n      max: randomInteger(lowerBound, upperBound)\n    };\n\n    while (bounds.min < bounds.max) {\n      sentence += ' ' + randomWord(words);\n      bounds.min++;\n    }\n\n    if (sentence.length) {\n      sentence = sentence.slice(1);\n      sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n    }\n\n    return sentence;\n  }\n\n  ;\n\n  function randomParagraph(words, lowerBound, upperBound, sentenceLowerBound, sentenceUpperBound) {\n    var paragraph = '',\n        bounds = {\n      min: 0,\n      max: randomInteger(lowerBound, upperBound)\n    };\n\n    while (bounds.min < bounds.max) {\n      paragraph += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n      bounds.min++;\n    }\n\n    if (paragraph.length) {\n      paragraph = paragraph.slice(2);\n      paragraph += '.';\n    }\n\n    return paragraph;\n  }\n\n  var iter = 0,\n      bounds = {\n    min: 0,\n    max: count\n  },\n      string = '',\n      prefix = '',\n      openingTag,\n      closingTag;\n\n  if (format === 'html') {\n    openingTag = '<p>';\n    closingTag = '</p>';\n  }\n\n  while (bounds.min < bounds.max) {\n    switch (units.toLowerCase()) {\n      case 'words':\n        string += ' ' + randomWord(words);\n        break;\n\n      case 'sentences':\n        string += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n        break;\n\n      case 'paragraphs':\n        var nextString = randomParagraph(words, paragraphLowerBound, paragraphUpperBound, sentenceLowerBound, sentenceUpperBound);\n\n        if (format === 'html') {\n          nextString = openingTag + nextString + closingTag;\n\n          if (bounds.min < bounds.max - 1) {\n            nextString += suffix; // Each paragraph on a new line\n          }\n        } else if (bounds.min < bounds.max - 1) {\n          nextString += suffix + suffix; // Double-up the EOL character to make distinct paragraphs, like carriage return\n        }\n\n        string += nextString;\n        break;\n    }\n\n    bounds.min++;\n  }\n\n  if (string.length) {\n    var pos = 0;\n\n    if (string.indexOf('. ') === 0) {\n      pos = 2;\n    } else if (string.indexOf('.') === 0 || string.indexOf(' ') === 0) {\n      pos = 1;\n    }\n\n    string = string.slice(pos);\n\n    if (units === 'sentences') {\n      string += '.';\n    }\n  }\n\n  return string;\n}\n\n;\n\nfunction simplePluralize(string) {\n  if (string.indexOf('s', string.length - 1) === -1) {\n    return string + 's';\n  }\n\n  return string;\n}\n\nmodule.exports = generator;","map":{"version":3,"sources":["/Users/sikidamjanovic/Documents/GitHub/blog-clone-app/node_modules/lorem-ipsum/lib/generator.js"],"names":["generator","options","arguments","length","count","units","sentenceLowerBound","sentenceUpperBound","paragraphLowerBound","paragraphUpperBound","format","words","require","random","Math","suffix","isNode","module","exports","isReactNative","product","navigator","isWindows","process","platform","simplePluralize","toLowerCase","randomInteger","min","max","floor","randomWord","randomSentence","lowerBound","upperBound","sentence","bounds","slice","charAt","toUpperCase","randomParagraph","paragraph","iter","string","prefix","openingTag","closingTag","nextString","pos","indexOf"],"mappings":"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","sourcesContent":["function generator() {\n  var options = (arguments.length) ? arguments[0] : {}\n    , count = options.count || 1\n    , units = options.units || 'sentences'\n    , sentenceLowerBound = options.sentenceLowerBound || 5\n    , sentenceUpperBound = options.sentenceUpperBound || 15\n    , paragraphLowerBound = options.paragraphLowerBound || 3\n    , paragraphUpperBound = options.paragraphUpperBound || 7\n    , format = options.format || 'plain'\n    , words = options.words || require('./dictionary').words\n    , random = options.random || Math.random\n    , suffix = options.suffix;\n\n  if (!suffix) {\n    var isNode = typeof module !== 'undefined' && module.exports;\n    var isReactNative = typeof product !== 'undefined' && product.navigator === 'ReactNative';\n    var isWindows = typeof process !== 'undefined' && 'win32' === process.platform;\n\n    if (!isReactNative && isNode && isWindows) {\n      suffix = '\\r\\n';\n    } else {\n      suffix = '\\n';\n    }\n  }\n\n  units = simplePluralize(units.toLowerCase());\n\n  function randomInteger(min, max) {\n    return Math.floor(random() * (max - min + 1) + min);\n  };\n\n  function randomWord(words) {\n    return words[randomInteger(0, words.length - 1)];\n  };\n\n  function randomSentence(words, lowerBound, upperBound) {\n    var sentence = ''\n      , bounds = {min: 0, max: randomInteger(lowerBound, upperBound)};\n\n    while (bounds.min < bounds.max) {\n      sentence += ' ' + randomWord(words);\n      bounds.min++;\n    }\n\n    if (sentence.length) {\n      sentence = sentence.slice(1);\n      sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n    }\n\n    return sentence;\n  };\n\n  function randomParagraph(words, lowerBound, upperBound, sentenceLowerBound, sentenceUpperBound) {\n    var paragraph = ''\n      , bounds = {min: 0, max: randomInteger(lowerBound, upperBound)};\n\n    while (bounds.min < bounds.max) {\n      paragraph += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n      bounds.min++;\n    }\n\n    if (paragraph.length) {\n      paragraph = paragraph.slice(2);\n      paragraph += '.';\n    }\n\n    return paragraph;\n  }\n\n  var iter = 0\n    , bounds = {min: 0, max: count}\n    , string = ''\n    , prefix = ''\n    , openingTag\n    , closingTag;\n\n  if (format === 'html') {\n    openingTag = '<p>';\n    closingTag = '</p>';\n  }\n\n  while (bounds.min < bounds.max) {\n    switch (units.toLowerCase()) {\n      case 'words':\n        string += ' ' + randomWord(words);\n        break;\n      case 'sentences':\n        string += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n        break;\n      case 'paragraphs':\n        var nextString = randomParagraph(words, paragraphLowerBound, paragraphUpperBound, sentenceLowerBound, sentenceUpperBound);\n\n        if (format === 'html') {\n          nextString = openingTag + nextString + closingTag;\n          if (bounds.min < bounds.max - 1) {\n            nextString += suffix; // Each paragraph on a new line\n          }\n        } else if (bounds.min < bounds.max - 1) {\n          nextString += suffix + suffix; // Double-up the EOL character to make distinct paragraphs, like carriage return\n        }\n\n        string += nextString;\n\n        break;\n    }\n\n    bounds.min++;\n  }\n\n  if (string.length) {\n    var pos = 0;\n\n    if (string.indexOf('. ') === 0) {\n      pos = 2;\n    } else if (string.indexOf('.') === 0 || string.indexOf(' ') === 0) {\n      pos = 1;\n    }\n\n    string = string.slice(pos);\n\n    if (units === 'sentences') {\n      string += '.';\n    }\n  }\n\n  return string;\n};\n\nfunction simplePluralize(string) {\n  if (string.indexOf('s', string.length - 1) === -1) {\n    return string + 's';\n  }\n  return string;\n}\n\nmodule.exports = generator;\n"]},"metadata":{},"sourceType":"script"}